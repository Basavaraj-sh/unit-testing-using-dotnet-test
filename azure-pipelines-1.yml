# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    codeCoverageEnabled: true

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: 'D:/a/_temp/TestResults/*.trx'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Install ReportGenerator tool
      dotnet tool install -g dotnet-reportgenerator-globaltool
      
      # Specify the path to the .coverage file
      $coverageFile = 'D:/a/_temp/TestResults/*/*.coverage'
      
      # Specify the output directory for the code coverage report
      $reportDirectory = 'D:/a/_temp/TestResults/'
      
      # Generate the code coverage report using ReportGenerator
      reportgenerator "-reports:$coverageFile" "-targetdir:$reportDirectory" "-reporttypes:Xml"
      
      # Publish the code coverage report as a build artifact
      #Publish-CodeCoverage -Path $reportDirectory -Name "Code Coverage Report"

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: 'D:/a/_temp/TestResults/*.xml'

#- task: BuildQualityChecks@9
#  inputs:
#    checkCoverage: true
#    coverageFailOption: 'fixed'
#    coverageType: 'lines'
#    coverageThreshold: '60'

- task: BuildQualityChecks@9
  inputs:
    checkCoverage: true
    coverageFailOption: 'build'
    coverageType: 'branches'
    treat0of0as100: true